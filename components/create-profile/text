export const mockFrontendProjects = [
{
title: "Interactive Dashboard",
liveLink: "https://interactive-dashboard-demo.vercel.app",
githubLink: "https://github.com/username/interactive-dashboard",
description: `I designed and developed a responsive analytics dashboard using React and TailwindCSS that visualizes complex data sets in an intuitive way.

Two significant challenges I solved:

1. Performance bottlenecks with large datasets: Initially, the dashboard would freeze when rendering more than 10,000 data points. I implemented data virtualization with react-window to render only visible elements and added web workers to handle data processing off the main thread. This resulted in a 90% improvement in render times and smooth 60fps scrolling even with 100,000+ data points.

2. Complex state management across multiple dashboard widgets: As the number of interconnected visualizations grew, prop drilling and state synchronization became unmanageable. I implemented a custom state management solution using React Context combined with useReducer, organized by feature slices. This allowed widgets to share data efficiently without unnecessary re-renders.

Technologies used: React, TypeScript, TailwindCSS, D3.js for visualizations, react-query for server state management, and Vitest for testing. The application was deployed on Vercel with a CI/CD pipeline for automated testing and deployment.`  },
  {
    title: "E-commerce Product Page",
    liveLink: "https://ecommerce-product-demo.netlify.app",
    githubLink: "https://github.com/username/ecommerce-product-page",
    description:`Built a fully responsive e-commerce product page with interactive features like image zooming, color selection, and a dynamic cart system.

Key problems I solved:

1. Accessibility challenges: The initial design didn't account for keyboard navigation and screen reader compatibility. I implemented ARIA attributes, focus management, and keyboard shortcuts to ensure the page was fully accessible to all users. This involved creating custom accessible components (like the image carousel and color picker) that maintained both visual appeal and WCAG AA compliance.

2. Image optimization for faster loading: Product images were causing slow initial load times (6+ seconds). I implemented responsive images with srcset, lazy loading, and WebP format conversion. Additionally, I built a custom image zoom feature using IntersectionObserver and CSS transforms instead of relying on heavy libraries. These optimizations reduced load time to under 1.5 seconds and improved LCP metrics significantly.

Built with React, Styled Components, Framer Motion for animations, and Jest/React Testing Library for comprehensive testing. I used a headless CMS (Contentful) to manage product data and Netlify for hosting with serverless functions for the cart API.`  },
  {
    title: "Progressive Web App for Weather Forecasting",
    liveLink: "https://weather-pwa-example.web.app",
    githubLink: "https://github.com/username/weather-pwa",
    description:`Developed a Progressive Web App (PWA) that provides real-time weather forecasts with offline capabilities and push notifications for weather alerts.

Major technical challenges overcome:

1. Offline functionality with data synchronization: Creating a seamless experience between online and offline modes was challenging. I implemented a sophisticated caching strategy using Service Workers and IndexedDB to store weather data, user preferences, and location history. When users go offline, they can still access previously viewed forecasts, and when they reconnect, the app intelligently syncs only the data that changed, minimizing data usage.

2. Geolocation accuracy and battery efficiency: The initial implementation drained battery quickly due to continuous location tracking. I redesigned the location service to use a combination of the Geolocation API with intelligent polling intervals, cached locations for frequently visited places, and incorporated the Device Orientation API to detect when users are moving versus stationary, reducing battery usage by approximately 60%.

Technologies used: React, TypeScript, PWA technologies (Service Workers, Web Push API, App Manifest), OpenWeatherMap API, workbox for offline caching, Firebase for hosting and cloud functions, and Lighthouse for performance monitoring. The app achieves a perfect 100 score in PWA audits and 90+ scores in performance, accessibility, and best practices.`
}
];
