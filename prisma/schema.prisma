// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/prisma.schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  email             String    @unique
  password          String?   // Optional for OAuth users
  hasCreatedProfile Boolean   @default(false)
  isVerified        Boolean   @default(false) // Indicates if the user has verified their email
  image             String?   // Optional profile image
  
  accounts      Account[]
  sessions      Session[]  // ID from OAuth provider
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  
  
  // You might want to add related models
  // For example:
  // clients          Client[]
  profile           Profile[]
  jobDetail         JobDetail?
  proposals         Proposal[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle    String    // Professional title/role
  bio         String    // Professional biography
  skills      String[]  // Array of skills
  isDefault   Boolean   @default(false)  // Indicates if this is the default profile
  profileStength Int @default(0)      // Strength of the profile (0-100)
  profileStengthMessage Json? // Message indicating the strength of the profile
  
  
  // Relation to User
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation to Projects
  projects    Project[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("profiles")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   // Project title
  description String   // Project description, problems solved and technologies used
  liveLink    String?  // Optional live URL
  repoLink  String?  // Optional GitHub URL
  
  // Relation to Profile
  profileId   String   @db.ObjectId
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  projectStrength Int @default(0) // Strength of the project (0-100)
  projectStrengthMessage Json? // Message indicating the strength of the project
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("projects")
}

model JobDetail {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  // Relation to User (One-to-One)
  userId      String    @unique @db.ObjectId // Ensures only one job detail per user
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  jobUrl    String
  platform  String
  platformJobId String
  jobHtml   String    
  timestamp DateTime  @default(now())

  @@map("jobDetails")
}

enum ProposalStatus {
  DRAFT
  SENT
  WON
}

model Proposal {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String   // Job title or proposal name
  jobDescription String  // Original job description
  proposal      String   // Generated proposal content
  
  // Proposal status
  status        ProposalStatus   @default(DRAFT) // draft | sent | opened | communication | won
  
  // Optional amount field
  amount        Float?   // Optional field for proposal/contract amount
  
  // Relation to User
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("proposals")
}
